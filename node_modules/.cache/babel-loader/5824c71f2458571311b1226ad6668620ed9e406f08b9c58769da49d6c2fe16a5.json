{"ast":null,"code":"export default {\n  name: \"Gallery\",\n  data() {\n    let sortedImages = [{\n      src: \"/image/personal-pic1.jpg\",\n      alt: \"Description of image 1\"\n    }, {\n      src: \"/image/personal-pic2.jpg\",\n      alt: \"Description of image 2\"\n    }, {\n      src: \"/image/personal-pic3.jpg\",\n      alt: \"Description of image 3\"\n    }, {\n      src: \"/image/personal-pic4.jpg\",\n      alt: \"Description of image 4\"\n    }, {\n      src: \"/image/personal-pic5.jpg\",\n      alt: \"Description of image 5\"\n    }, {\n      src: \"/image/personal-pic6.jpg\",\n      alt: \"Description of image 6\"\n    }, {\n      src: \"/image/personal-pic7.jpg\",\n      alt: \"Description of image 7\"\n    }, {\n      src: \"/image/personal-pic8.jpg\",\n      alt: \"Description of image 8\"\n    }, {\n      src: \"/image/personal-pic9.jpg\",\n      alt: \"Description of image 9\"\n    }, {\n      src: \"/image/personal-pic10.jpg\",\n      alt: \"Description of image 10\"\n    }, {\n      src: \"/image/personal-pic11.jpg\",\n      alt: \"Description of image 11\"\n    }, {\n      src: \"/image/personal-pic12.jpg\",\n      alt: \"Description of image 12\"\n    }\n    // ... other images\n    ].sort((a, b) => {\n      // Extracting numbers from filenames and sorting in descending order\n      let aNum = parseInt(a.src.match(/\\d+/)[0]);\n      let bNum = parseInt(b.src.match(/\\d+/)[0]);\n      return bNum - aNum;\n    });\n    return {\n      images: sortedImages\n    };\n  }\n};","map":{"version":3,"names":["name","data","sortedImages","src","alt","sort","a","b","aNum","parseInt","match","bNum","images"],"sources":["C:\\Users\\USER\\tpc-website\\src\\views\\Gallery.vue"],"sourcesContent":["<template>\r\n  <div class=\"gallery-container\">\r\n    <h1 style=\"margin-top: 4rem; margin-bottom: 2rem\">My Gallery</h1>\r\n    <div class=\"gallery-grid\">\r\n      <div v-for=\"(image, index) in images\" :key=\"index\" class=\"gallery-item\">\r\n        <img :src=\"image.src\" :alt=\"image.alt\" class=\"gallery-image\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"Gallery\",\r\n  data() {\r\n    let sortedImages = [\r\n      { src: \"/image/personal-pic1.jpg\", alt: \"Description of image 1\" },\r\n      { src: \"/image/personal-pic2.jpg\", alt: \"Description of image 2\" },\r\n      { src: \"/image/personal-pic3.jpg\", alt: \"Description of image 3\" },\r\n      { src: \"/image/personal-pic4.jpg\", alt: \"Description of image 4\" },\r\n      { src: \"/image/personal-pic5.jpg\", alt: \"Description of image 5\" },\r\n      { src: \"/image/personal-pic6.jpg\", alt: \"Description of image 6\" },\r\n      { src: \"/image/personal-pic7.jpg\", alt: \"Description of image 7\" },\r\n      { src: \"/image/personal-pic8.jpg\", alt: \"Description of image 8\" },\r\n      { src: \"/image/personal-pic9.jpg\", alt: \"Description of image 9\" },\r\n      { src: \"/image/personal-pic10.jpg\", alt: \"Description of image 10\" },\r\n      { src: \"/image/personal-pic11.jpg\", alt: \"Description of image 11\" },\r\n      { src: \"/image/personal-pic12.jpg\", alt: \"Description of image 12\" },\r\n      // ... other images\r\n    ].sort((a, b) => {\r\n      // Extracting numbers from filenames and sorting in descending order\r\n      let aNum = parseInt(a.src.match(/\\d+/)[0]);\r\n      let bNum = parseInt(b.src.match(/\\d+/)[0]);\r\n      return bNum - aNum;\r\n    });\r\n\r\n    return {\r\n      images: sortedImages,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.gallery-container {\r\n  text-align: center;\r\n  margin: auto;\r\n  padding: 20px;\r\n  background: linear-gradient(\r\n      135deg,\r\n      rgba(255, 255, 255, 0.5) 0%,\r\n      rgba(255, 255, 255, 0.5) 100%\r\n    ),\r\n    url(\"../../public/image/bg3.png\") no-repeat center center;\r\n  background-size: cover; /* Cover the entire container */\r\n  background-position: center; /* Center the background image */\r\n  background-repeat: no-repeat; /* Prevent the image from repeating */\r\n}\r\n.gallery-container h1 {\r\n  color: #0b3b6d;\r\n}\r\n\r\n.gallery-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  grid-gap: 15px;\r\n  max-width: 1200px;\r\n  margin: auto;\r\n}\r\n\r\n.gallery-item {\r\n  overflow: hidden;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.gallery-image {\r\n  width: 200px; /* Adjust width as needed */\r\n  height: 200px; /* Ensure height is the same as width for square shape */\r\n  object-fit: cover; /* This will cover the area without stretching the image */\r\n  overflow: hidden; /* Hide parts of the image that don't fit */\r\n  display: block;\r\n  margin: auto; /* Center align if within a container */\r\n}\r\n\r\n.gallery-image:hover {\r\n  transform: scale(1.05);\r\n}\r\n</style>\r\n"],"mappings":"AAYA,eAAe;EACbA,IAAI,EAAE,SAAS;EACfC,IAAIA,CAAA,EAAG;IACL,IAAIC,YAAW,GAAI,CACjB;MAAEC,GAAG,EAAE,0BAA0B;MAAEC,GAAG,EAAE;IAAyB,CAAC,EAClE;MAAED,GAAG,EAAE,0BAA0B;MAAEC,GAAG,EAAE;IAAyB,CAAC,EAClE;MAAED,GAAG,EAAE,0BAA0B;MAAEC,GAAG,EAAE;IAAyB,CAAC,EAClE;MAAED,GAAG,EAAE,0BAA0B;MAAEC,GAAG,EAAE;IAAyB,CAAC,EAClE;MAAED,GAAG,EAAE,0BAA0B;MAAEC,GAAG,EAAE;IAAyB,CAAC,EAClE;MAAED,GAAG,EAAE,0BAA0B;MAAEC,GAAG,EAAE;IAAyB,CAAC,EAClE;MAAED,GAAG,EAAE,0BAA0B;MAAEC,GAAG,EAAE;IAAyB,CAAC,EAClE;MAAED,GAAG,EAAE,0BAA0B;MAAEC,GAAG,EAAE;IAAyB,CAAC,EAClE;MAAED,GAAG,EAAE,0BAA0B;MAAEC,GAAG,EAAE;IAAyB,CAAC,EAClE;MAAED,GAAG,EAAE,2BAA2B;MAAEC,GAAG,EAAE;IAA0B,CAAC,EACpE;MAAED,GAAG,EAAE,2BAA2B;MAAEC,GAAG,EAAE;IAA0B,CAAC,EACpE;MAAED,GAAG,EAAE,2BAA2B;MAAEC,GAAG,EAAE;IAA0B;IACnE;IAAA,CACD,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACf;MACA,IAAIC,IAAG,GAAIC,QAAQ,CAACH,CAAC,CAACH,GAAG,CAACO,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1C,IAAIC,IAAG,GAAIF,QAAQ,CAACF,CAAC,CAACJ,GAAG,CAACO,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1C,OAAOC,IAAG,GAAIH,IAAI;IACpB,CAAC,CAAC;IAEF,OAAO;MACLI,MAAM,EAAEV;IACV,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}